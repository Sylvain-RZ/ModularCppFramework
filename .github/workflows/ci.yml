name: CI

on:
  push:
    branches: [ main, master, develop, dev ]
  pull_request:
    branches: [ main, master, develop, dev ]

jobs:
  build-and-test:
    name: ${{ matrix.os }} - ${{ matrix.build_type }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Debug, Release]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up build environment (Ubuntu)
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake ninja-build

    - name: Set up build environment (macOS)
      if: startsWith(matrix.os, 'macos')
      run: |
        brew install cmake ninja

    - name: Configure CMake
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DBUILD_TESTS=ON -DBUILD_EXAMPLES=ON -G Ninja

    - name: Build
      run: |
        cmake --build build --config ${{ matrix.build_type }} --parallel

    - name: Run tests
      run: |
        cd build
        # FileWatcher test is flaky on Windows due to file system timing characteristics
        # The test passes on Linux/macOS where file metadata updates are more predictable
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          ctest --output-on-failure --build-config ${{ matrix.build_type }} -C ${{ matrix.build_type }} -E FileWatcher
        else
          ctest --output-on-failure --build-config ${{ matrix.build_type }} -C ${{ matrix.build_type }}
        fi
      shell: bash

    - name: Upload test results on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.build_type }}
        path: |
          build/Testing/Temporary/LastTest.log
          build/bin/tests/

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check for TODO/FIXME comments
      run: |
        echo "Scanning for TODO/FIXME comments..."
        TODO_COUNT=$(grep -r "TODO" --include="*.hpp" --include="*.cpp" --exclude-dir=external --exclude-dir=build . | wc -l)
        FIXME_COUNT=$(grep -r "FIXME" --include="*.hpp" --include="*.cpp" --exclude-dir=external --exclude-dir=build . | wc -l)
        echo "Found $TODO_COUNT TODO comments"
        echo "Found $FIXME_COUNT FIXME comments"
        if [ $FIXME_COUNT -gt 0 ]; then
          echo "::warning::Found $FIXME_COUNT FIXME comments that should be addressed"
          grep -rn "FIXME" --include="*.hpp" --include="*.cpp" --exclude-dir=external --exclude-dir=build .
        fi

    - name: Check file formatting (line endings)
      run: |
        echo "Checking for Windows line endings..."
        if find . -path ./external -prune -o -path ./build -prune -o \( -name "*.hpp" -o -name "*.cpp" \) -exec file {} \; | grep CRLF; then
          echo "::warning::Found files with Windows line endings (CRLF). Consider using LF line endings."
        else
          echo "All files use Unix line endings (LF)"
        fi

  build-documentation:
    name: Build Documentation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Doxygen
      run: |
        sudo apt-get update
        sudo apt-get install -y doxygen graphviz

    - name: Check for Doxyfile
      run: |
        if [ -f Doxyfile ]; then
          echo "Doxyfile found, generating documentation..."
          doxygen Doxyfile
        else
          echo "::warning::No Doxyfile found. Documentation generation skipped."
        fi

    - name: Upload documentation
      if: success() && hashFiles('Doxyfile') != ''
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: docs/doxygen/html/
        retention-days: 30

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake ninja-build lcov

    - name: Configure with coverage flags
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTS=ON -DCMAKE_CXX_FLAGS="--coverage -fprofile-update=atomic" -G Ninja

    - name: Build
      run: |
        cmake --build build --parallel

    - name: Run tests
      run: |
        cd build
        ctest --output-on-failure

    - name: Generate coverage report
      run: |
        # Capture coverage data (ignore STL warnings, negative counts fixed by atomic updates)
        lcov --directory build --capture --output-file coverage.info --rc geninfo_unexecuted_blocks=1 --ignore-errors negative || true
        # Remove system/external files from coverage
        lcov --remove coverage.info '/usr/*' '*/external/*' '*/tests/*' --output-file coverage.info || true
        # List coverage summary
        lcov --list coverage.info || echo "Coverage report generated with warnings (non-critical)"

    - name: Upload coverage to artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage.info
